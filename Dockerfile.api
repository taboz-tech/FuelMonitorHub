FROM node:20-alpine AS base

WORKDIR /app

# Copy package files
COPY package*.json ./

# Development stage
FROM base AS development
RUN npm ci
COPY . .
CMD ["npm", "run", "dev"]

# Production build stage
FROM base AS builder
RUN npm ci
COPY . .

# Create the dist directory and build the server
RUN mkdir -p dist

# Fixed esbuild command with ESM format and additional externals
RUN npx esbuild server/index.ts \
  --bundle \
  --platform=node \
  --target=node20 \
  --outfile=dist/index.js \
  --external:pg \
  --external:ssh2 \
  --external:bcrypt \
  --external:jsonwebtoken \
  --external:drizzle-orm \
  --external:@neondatabase/serverless \
  --external:node-cron \
  --external:express \
  --external:express-session \
  --external:memorystore \
  --external:connect-pg-simple \
  --external:passport \
  --external:passport-local \
  --external:@babel/preset-typescript \
  --external:lightningcss \
  --external:vite \
  --format=esm \
  --packages=external

# Production stage
FROM node:20-alpine AS production

WORKDIR /app

# Install SSH client and other dependencies needed for tunnel
RUN apk add --no-cache openssh-client

# Copy package files and install production dependencies + required packages
COPY package*.json ./
RUN npm ci --only=production && npm install vite ssh2

# Copy built application
COPY --from=builder /app/dist ./dist

# Copy any runtime files needed
COPY --from=builder /app/shared ./shared

# Create public directory structure that the API expects (if needed)
RUN mkdir -p /app/dist/public

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Change ownership of the app directory
RUN chown -R nodejs:nodejs /app
USER nodejs

# Expose port
EXPOSE 5000

# Environment variables
ENV NODE_ENV=production
ENV PORT=5000

# Start the API server - ESM format
CMD ["node", "--experimental-modules", "dist/index.js"]